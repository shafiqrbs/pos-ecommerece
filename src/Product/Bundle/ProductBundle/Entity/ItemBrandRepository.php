<?php

namespace Product\Bundle\ProductBundle\Entity;
use Doctrine\ORM\EntityRepository;
use Setting\Bundle\ToolBundle\Entity\GlobalOption;


/**
 * ItemBrandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemBrandRepository extends EntityRepository
{


    public function searchAutoComplete($q, GlobalOption $config)
    {
        $query = $this->createQueryBuilder('e');
        $query->select('e.name as id');
        $query->addSelect('e.name as text');
        $query->where($query->expr()->like("e.name", "'$q%'"  ));
        $query->andWhere("e.gl = :config");
        $query->setParameter('config', $config->getId());
        $query->groupBy('e.id');
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults( '10' );
        return $query->getQuery()->getResult();

    }

    public function insertBrand(Item $stock)
    {
        $config = $stock->getInventoryConfig()->getGlobalOption()->getEcommerceConfig();
        $entity = $this->findOneBy(array('ecommerceConfig' => $config,'name' => $stock->getBrandName()));
        if(empty($entity)){
            $brand = new ItemBrand();
            $brand->setEcommerceConfig($config);
            $brand->setName($stock->getBrandName());
            $brand->setNameBn($stock->getBrandNameBn());
            $this->_em->persist($brand);
            $this->_em->flush();
            return $brand;
        }
        return $entity;
    }

    public function getFeatureBrand($config, $limit)
    {
        $query = $this->createQueryBuilder('e');
        $query->where("e.ecommerceConfig = :config")->setParameter('config', $config);
        $query->andWhere("e.status = 1");
        $query->andWhere("e.feature = 1");
        $query->orderBy('e.name', 'ASC');
        $query->setMaxResults($limit);
        return $query->getQuery()->getResult();

    }

    function brandInventoryTree($config){

        $sql = "SELECT name FROM ecommerce_item_brand WHERE  ecommerceConfig_id ={$config->getId()}";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        $results =  $stmt->fetchAll();
        return $results;
    }


}
